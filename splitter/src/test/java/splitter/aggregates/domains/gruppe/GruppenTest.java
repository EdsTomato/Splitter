package splitter.aggregates.domains.gruppe;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static splitter.aggregates.domains.gruppe.Gruppe.gruppeOhneBeschreibung;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.List;

public class GruppenTest {
    
   @Test
    @DisplayName("add Expense")
    void test1() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("Ersteller");
        Person A = new Person("A", new Saldo(0));
        Person B = new Person("B", new Saldo(0));
        gruppe.addPerson(A);
        gruppe.addPerson(B);
        Ausgabe e = new Ausgabe(A, List.of(A,B), new Saldo(100.0),"Test");
        gruppe.addAusgabe(e);
        assertTrue(gruppe.getAusgaben().contains(e));
    }
    @Test
    @DisplayName("Empty Balance change")
    void test2() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("Ersteller");
        Person A = new Person("A", new Saldo(0));
        Person B = new Person("B", new Saldo(0));
        gruppe.addPerson(A);
        gruppe.addPerson(B);
        Ausgabe e = new Ausgabe(A, List.of(A,B), new Saldo(100.0),"Test");
        gruppe.addAusgabe(e);
        assertTrue(A.saldo().getWert()==50.0 && B.saldo().getWert()==-50.0);

    }

    @Test
    @DisplayName("add Member to a gruppe")
    void test4() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("Ersteller");
        Person person = new Person("bernard",new Saldo(200.0));
        gruppe.addPerson(person);
        assertTrue(gruppe.getPersonen().contains(person));
    }

    @Test
    @DisplayName("Szenario 1")
    void test7() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("A");
        Person A = gruppe.getErsteller();
        Person B = new Person("B",new Saldo(0));
        gruppe.addPerson(B);
        gruppe.addAusgabe(new Ausgabe(A, List.of(A,B), new Saldo(10),""));
        gruppe.addAusgabe(new Ausgabe(A, List.of(A,B), new Saldo(20),""));
        gruppe.ausgleichen();
        assertEquals(15,A.saldo().getWert());
        assertEquals(-15,B.saldo().getWert());
    }

    @Test
    @DisplayName("Szenario 2")
    void test8() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("A");
        Person A = gruppe.getErsteller();
        Person B = new Person("B",new Saldo(0));
        gruppe.addPerson(B);
        gruppe.addAusgabe(new Ausgabe(A, List.of(A,B), new Saldo(10),""));
        gruppe.addAusgabe(new Ausgabe(B, List.of(A,B), new Saldo(20),""));
        gruppe.ausgleichen();
        assertEquals(-5,A.saldo().getWert());
        assertEquals(5,B.saldo().getWert());
    }

    @Test
    @DisplayName("Szenario 3")
    void test9() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("A");
        Person A = gruppe.getErsteller();
        Person B = new Person("B",new Saldo(0));
        gruppe.addPerson(B);
        gruppe.addAusgabe(new Ausgabe(A, List.of(B), new Saldo(10),""));
        gruppe.addAusgabe(new Ausgabe(A, List.of(A,B), new Saldo(20),""));
        gruppe.ausgleichen();
        assertEquals(20,A.saldo().getWert());
        assertEquals(-20,B.saldo().getWert());
    }

    @Test
    @DisplayName("Szenario 4")
    void test10() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("A");
        Person A = gruppe.getErsteller();
        Person B = new Person("B",new Saldo(0));
        Person C = new Person("C",new Saldo(0));
        gruppe.addPerson(B);
        gruppe.addPerson(C);
        gruppe.addAusgabe(new Ausgabe(A, List.of(A,B), new Saldo(10),""));
        gruppe.addAusgabe(new Ausgabe(B, List.of(B,C), new Saldo(10),""));
        gruppe.addAusgabe(new Ausgabe(C, List.of(C,A), new Saldo(10),""));
        gruppe.ausgleichen();
        assertEquals(0,A.saldo().getWert());
        assertEquals(0,B.saldo().getWert());
        assertEquals(0,C.saldo().getWert());
    }

    @Test
    @DisplayName("Szenario 5 + Sind Transactions vorhanden")
    void test11() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("Anton");
        Person Anton = gruppe.getErsteller();
        Person Berta = new Person("Berta",new Saldo(0));
        Person Christian = new Person("Christian",new Saldo(0));
        gruppe.addPerson(Berta);
        gruppe.addPerson(Christian);
        gruppe.addAusgabe(new Ausgabe(Anton, List.of(Anton,Berta,Christian), new Saldo(60),""));
        gruppe.addAusgabe(new Ausgabe(Berta, List.of(Anton,Berta,Christian), new Saldo(30),""));
        gruppe.addAusgabe(new Ausgabe(Christian, List.of(Berta,Christian), new Saldo(100),""));
        gruppe.ausgleichen();
        gruppe.getTransaktionen().forEach(t -> System.out.println(t.toString()));
        assertEquals(30,Anton.saldo().getWert());
        assertEquals(-50,Berta.saldo().getWert());
        assertEquals(20,Christian.saldo().getWert());
    }

    @Test
    @DisplayName("Szenario 6")
    void test3() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("Ersteller");
        Person A = new Person("A", new Saldo(0));
        Person B = new Person("B", new Saldo(0));
        Person C = new Person("C", new Saldo(0));
        Person D = new Person("D", new Saldo(0));
        Person E = new Person("E", new Saldo(0));
        Person F = new Person("F", new Saldo(0));
        gruppe.addPerson(A);
        gruppe.addPerson(B);
        gruppe.addPerson(C);
        gruppe.addPerson(D);
        gruppe.addPerson(E);
        gruppe.addPerson(F);
        gruppe.addAusgabe(new Ausgabe(A, List.of(A,B,C,D,E,F), new Saldo(564.0),"Hotel"));
        gruppe.addAusgabe(new Ausgabe(B, List.of(B,A), new Saldo(38.58),"Hinfahrt"));
        gruppe.addAusgabe(new Ausgabe(B, List.of(B,A,D), new Saldo(38.58),"Rückfahrt"));
        gruppe.addAusgabe(new Ausgabe(C, List.of(C,E,F), new Saldo(82.11),"Hin- und Rückfahrt"));
        gruppe.addAusgabe(new Ausgabe(D, List.of(A,B,C,D,E,F), new Saldo(96.0),"Stadttour"));
        gruppe.addAusgabe(new Ausgabe(F, List.of(B,E,F), new Saldo(95.37),"Theater"));
        gruppe.ausgleichen();
        gruppe.getTransaktionen().forEach(t -> System.out.println(t.toString()));
        assertEquals(421.85,A.saldo().getWert());
        assertEquals(-96.78,B.saldo().getWert());
        assertEquals(-55.26,C.saldo().getWert());
        assertEquals(-26.86,D.saldo().getWert());
        assertEquals(-169.16,E.saldo().getWert());
        assertEquals(-73.79,F.saldo().getWert());
    }

    @Test
    @DisplayName("Szenario 7")
    void test13() throws IllegalAccessException {
        Gruppe gruppe = gruppeOhneBeschreibung("A");
        Person A = gruppe.getErsteller();
        Person B = new Person("B", new Saldo(0));
        Person C = new Person("C", new Saldo(0));
        Person D = new Person("D", new Saldo(0));
        Person E = new Person("E", new Saldo(0));
        Person F = new Person("F", new Saldo(0));
        Person G = new Person("G", new Saldo(0));
        gruppe.addPerson(B);
        gruppe.addPerson(C);
        gruppe.addPerson(D);
        gruppe.addPerson(E);
        gruppe.addPerson(F);
        gruppe.addPerson(G);
        gruppe.addAusgabe(new Ausgabe(D, List.of(D,F), new Saldo(20),""));
        gruppe.addAusgabe(new Ausgabe(G, List.of(B), new Saldo(10),""));
        gruppe.addAusgabe(new Ausgabe(E, List.of(A,C,E), new Saldo(75),""));
        gruppe.addAusgabe(new Ausgabe(F, List.of(A,F), new Saldo(50),""));
        gruppe.addAusgabe(new Ausgabe(E, List.of(D), new Saldo(40),""));
        gruppe.addAusgabe(new Ausgabe(F, List.of(B,F), new Saldo(40),""));
        gruppe.addAusgabe(new Ausgabe(F, List.of(C), new Saldo(5),""));
        gruppe.addAusgabe(new Ausgabe(G, List.of(A), new Saldo(30),""));
        gruppe.ausgleichen();
        gruppe.getTransaktionen().forEach(t -> System.out.println(t.toString()));
        assertEquals(-80,A.saldo().getWert());
        assertEquals(-30,B.saldo().getWert());
        assertEquals(-30,C.saldo().getWert());
        assertEquals(-30,D.saldo().getWert());
        assertEquals(90,E.saldo().getWert());
        assertEquals(40,F.saldo().getWert());
        assertEquals(40,G.saldo().getWert());
    }
}
